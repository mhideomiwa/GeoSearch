'use client';

import React, {useEffect} from 'react';
import {
    APIProvider,
    Map,
    useMap,
    useMapsLibrary,
} from '@vis.gl/react-google-maps';
import {useGeoSearchContext} from "@/app/context/GeoSearchContextHookData";

const API_KEY = process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY || '';

const StreetViewInitializer = () => {
    const map = useMap();
    const streetViewLib = useMapsLibrary('streetView');
    const {hiderPosition, setHiderPosition, setIsLoading} = useGeoSearchContext();
    console.log('Loading StreetViewInitializer with hiderPosition:', hiderPosition);

    useEffect(() => {
        if (!map || !streetViewLib || !hiderPosition?.lat || !hiderPosition?.lng) {
            console.error("Map or StreetView library not loaded, or hider position not set.");
            setIsLoading!(false);
            return;
        }

            if (hiderPosition.lat === 0 || hiderPosition.lng === 0) {
                // If the hider position is not set, use a randomizer
                const generateHidingPosition = async (attempt = 1) => {
                    if (attempt > 15) {
                        console.error("Too many failed attempts");
                        setIsLoading(false);
                        return;
                    }
                    try {
                        const response = await fetch('/api/random-position');
                        const { lat, lng } = await response.json();

                        const streetViewService = new google.maps.StreetViewService();

                        await streetViewService.getPanorama({location: {lat, lng}, radius: 50}, (data, status) => {
                            if (status === google.maps.StreetViewStatus.OK) {
                                setHiderPosition!({lat, lng});
                                setIsLoading!(false);
                            } else {
                                console.log("Retrying... attempt", attempt);
                                generateHidingPosition(attempt + 1);
                            }
                        });
                    } catch (error) {
                        console.error("Error generating hiding position:", error);
                        setIsLoading(false);
                    }
                };
                generateHidingPosition();
            }

        const streetView = map.getStreetView();
        streetView.setPosition(hiderPosition);
        streetView.setPov({ heading: 0, pitch: 0 }); // optional, customize view angle
        streetView.setOptions({addressControl: false, showRoadLabels: false, enableCloseButton: false});
        streetView.setVisible(true); // Generated by chatGPT because I couldn't find documentation.  I had most everything else, but I couldn't turn the street view on. 🤦‍♂️
    }, [map, streetViewLib, hiderPosition]);

    return null;
};

const GuessView = () => {
    return (
        <APIProvider apiKey={API_KEY}>
            <Map
                id="guessViewMap"
                mapId="afb641b9e0b85f94"
                style={{width: '100%', height: '100%'}}
                defaultCenter={{lat: 22.54992, lng: 0}}
                defaultZoom={3}
                gestureHandling="greedy"
                disableDefaultUI={true}
                streetViewControl={true}
            >
                <StreetViewInitializer />
            </Map>
        </APIProvider>
    );
};

export default GuessView;
